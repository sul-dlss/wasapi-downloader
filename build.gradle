buildscript {
    repositories {
        jcenter()
    }
}

plugins {
    id 'java'
    id 'jacoco'
    id 'com.github.kt3k.coveralls' version '2.8.1'
    id 'application'
}

version 1.0

mainClassName = 'edu.stanford.dlss.was.WasapiDownloader'

repositories {
    jcenter() // for mockito
    mavenCentral() // for jacoco and kt3k.coveralls plugins
}

dependencies {
    //For basic command line parsing and option definitions.
    compile 'commons-cli:commons-cli:1.4'

    //Json processing
    compile 'com.fasterxml.jackson.core:jackson-databind:2.8.6'

    //Unit testing framework.
    testCompile 'junit:junit:4.12'

    //For creating mock objects in unit tests
    testCompile "org.mockito:mockito-core:2.+"
}

sourceSets {
    main {
        java {
            srcDir 'src'
        }
    }
    test {
        java {
            srcDir 'test'
        }
    }
}

jacocoTestReport {
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }
}

// indicate test results in the console output
test {
    testLogging {
        // set options for log level LIFECYCLE
        events "passed", "skipped", "failed", "standardOut"
        showExceptions true
        exceptionFormat "full"
        showCauses true
        showStackTraces true

        // set options for log level DEBUG and INFO
        debug {
            events "started", "passed", "skipped", "failed", "standardOut", "standardError"
            exceptionFormat "full"
        }
        info.events = debug.events
        info.exceptionFormat = debug.exceptionFormat

        afterSuite { desc, result ->
            if (!desc.parent) { // will match the outermost suite
                def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                def startItem = '|  ', endItem = '  |'
                def repeatLength = startItem.length() + output.length() + endItem.length()
                println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
            }
        }
    }
}

check.dependsOn jacocoTestReport

//Attributes to add to Jar
Map<String, String> jarAttributes = [
        "Gradle-Version": gradle.gradleVersion,
        "Host": InetAddress.getLocalHost().getHostName(),
        "Built-By": System.getProperty("user.name"),
        "Build-Jdk": System.getProperty("java.version"),
        "GradleProjectName": project.name,
        "Main-Class": mainClassName
]

jar {
    manifest {
        attributes(jarAttributes)
    }
}
